% --- Helper Function to Enhance GA Plot (Corrected for Scatter Objects) ---
function enhanceGAPlot(figHandle, plotTitle, bestFitnessValue)
    % Enhances the plot generated by gaplotbestf, handling Scatter objects

    if isempty(figHandle) || ~ishandle(figHandle)
        fprintf('Warning: Invalid figure handle passed to enhanceGAPlot.\n');
        return;
    end

    % Make the figure current and get its axes
    figure(figHandle);
    ax = gca; % Get current axes
    hold(ax, 'on'); % Ensure we can add the new line plot

    % --- Find the plot objects (Best and Mean scatter) ---
    kids = get(ax, 'Children');
    h_scatter_best = [];
    h_scatter_mean = [];
    h_line_best = []; % Handle for the NEW line we will create

    % Try finding based on expected DisplayNames (more robust)
    try
        h_scatter_best = findobj(kids, 'Type', 'Scatter', 'DisplayName', 'Best penalty value');
        h_scatter_mean = findobj(kids, 'Type', 'Scatter', 'DisplayName', 'Mean penalty value');
    catch ME
        fprintf('Warning: Error finding plot objects by DisplayName: %s. Trying fallback.\n', ME.message);
    end

    % Fallback if not found by DisplayName (less robust)
    if isempty(h_scatter_best) || isempty(h_scatter_mean)
        fprintf('Info: Trying to find scatter objects by order.\n');
        scatterObjs = findobj(kids, 'Type', 'Scatter');
        if numel(scatterObjs) >= 2
             % Assuming findobj returns in reverse plot order: mean first, then best
             h_scatter_mean = scatterObjs(1);
             h_scatter_best = scatterObjs(2);
             fprintf('Found scatter objects by assuming order.\n');
        elseif numel(scatterObjs) == 1
             fprintf('Warning: Found only one scatter object. Cannot distinguish Best/Mean reliably by order.\n');
             % Attempt to identify based on data if possible (more complex)
             % For now, we might only style the one found or skip styling.
             h_scatter_mean = scatterObjs(1); % Assign to mean for basic styling
        else
            fprintf('Error: Could not reliably identify Best/Mean scatter objects.\n');
            % Proceed with other enhancements anyway
        end
    end

    % --- Customize Plot Elements ---

    % 1. Handle BEST fitness: Extract data, plot line, hide original scatter
    if ~isempty(h_scatter_best) && ishandle(h_scatter_best)
        x_data_best = h_scatter_best.XData;
        y_data_best = h_scatter_best.YData;

        % Plot a NEW line connecting the best points
        h_line_best = plot(ax, x_data_best, y_data_best, ...
            '-o', ... % Line with circle markers
            'Color', [0 0.4470 0.7410], ... % MATLAB default blue
            'LineWidth', 1.5, ...
            'MarkerSize', 4, ... % Smaller markers on the line
            'MarkerFaceColor', [0 0.4470 0.7410], ...
            'DisplayName', 'Best Fitness'); % Set display name for legend

        % Hide the original scatter markers for 'Best' to avoid clutter
        h_scatter_best.MarkerEdgeAlpha = 0; % Make invisible
        h_scatter_best.MarkerFaceAlpha = 0;
        set(h_scatter_best, 'HandleVisibility', 'off'); % Hide from legend auto-update

        fprintf('Applied line style to Best Fitness data.\n');
    else
         fprintf('Warning: Could not find or style Best Fitness scatter object.\n');
    end

    % 2. Handle MEAN fitness: Style the scatter markers
    if ~isempty(h_scatter_mean) && ishandle(h_scatter_mean)
        set(h_scatter_mean, ...
            'Marker', '.', ...           % Small dot marker
            'SizeData', 80, ...          % Adjust marker size if needed
            'MarkerEdgeColor', [0.8500 0.3250 0.0980], ... % MATLAB default orange
            'DisplayName', 'Mean Fitness'); % Update display name
        fprintf('Styled Mean Fitness scatter object.\n');
         set(h_scatter_mean, 'HandleVisibility', 'on'); % Ensure it shows in legend
    else
         fprintf('Warning: Could not find or style Mean Fitness scatter object.\n');
    end

    % --- Customize Axes and Title ---
    title(ax, sprintf('%s (Final Best: %.6f)', plotTitle, bestFitnessValue), ...
          'FontSize', 12, 'FontWeight', 'bold');
    xlabel(ax, 'Generation', 'FontSize', 11, 'FontWeight', 'bold');
    ylabel(ax, 'Fitness Value (Lower is Better)', 'FontSize', 11, 'FontWeight', 'bold');
    grid(ax, 'on');
    grid(ax, 'minor');

    % --- Legend ---
    % Create legend using the NEW line handle and the mean scatter handle
    handles_to_legend = [];
    labels_for_legend = {};
    if ~isempty(h_line_best) && ishandle(h_line_best)
        handles_to_legend(end+1) = h_line_best;
        labels_for_legend{end+1} = get(h_line_best, 'DisplayName');
    end
     if ~isempty(h_scatter_mean) && ishandle(h_scatter_mean)
        handles_to_legend(end+1) = h_scatter_mean;
        labels_for_legend{end+1} = get(h_scatter_mean, 'DisplayName');
    end

    if ~isempty(handles_to_legend)
        legend(ax, handles_to_legend, labels_for_legend, 'FontSize', 10, 'Location', 'best');
    else
        legend(ax, 'show'); % Fallback to default legend
        fprintf('Warning: Could not create custom legend; showing default.\n');
    end

    hold(ax, 'off'); % Release the hold
    fprintf('Plot enhancements applied for: %s\n', plotTitle);
end